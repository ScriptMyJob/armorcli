#!/usr/bin/env python
# Written by:   Robert J.
#               Robert@scriptmyjob.com

import armor_auth
import infrastructure

import sys
import json
import os

#######################################
##### Global Variables ################
#######################################

USAGE   = """
Usage:
    armorcli (options) <command>

Options:
    security            Display from under the Security Tab
    infrastructure      Display from under the Infrastructure Tab
    support             Display from under the Support Tab
    account             Display from under the Account Tab

Commands:
    infrastructure
        list_vms


Examples:
    armorcli infrastructure list_vms    # Returns a list of VMs
"""

DEBUG   = os.environ.get('Debug', None)

account_id, baseurl, token   = armor_auth.main()

headers = {
    "Accept": "application/json",
    "Authorization": "FH-AUTH " + token,
    "X-Account-Context": str(account_id)
}

first_arg   = [
    "security",
    "infrastructure",
    "support",
    "account"
]

#######################################
### Main Function #####################
#######################################

def main():
    if DEBUG:
        print("Checking syntax.")

    syntax_check()

    if DEBUG:
        print("\nBase URL: "    + baseurl           + "\n")
        print(
            "Headers: "       +
            json.dumps(
                headers,
                indent=4,
                sort_keys=True
            )                                      + "\n"
        )

    if sys.argv[1] == "infrastructure":
        if sys.argv[2] == "list_vms":
            out = infrastructure.get_vm_list(baseurl, headers)
            if len(sys.argv) == 4:
                out = [l[sys.argv[3]] for l in out]

            print(
                json.dumps(out, indent=4, sort_keys=True)
            )

    if DEBUG:
        print('Returned output')

    return out


#######################################
### Program Specific Functions ########
#######################################

def syntax_check():
    if len(sys.argv) < 3:
        invalid(1)
    if sys.argv[1] not in first_arg:
        invalid(2)


def invalid(code=255):
    print("Invalid syntax: \n" + USAGE + "\n")
    sys.exit(code)

#######################################
##### Execution #######################
#######################################

if __name__ == "__main__":
    main()
