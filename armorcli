#!/usr/bin/env python
# Written by:   Robert J.
#               Robert@scriptmyjob.com

import armor_auth
import infrastructure
import account

import sys
import json
import os

#######################################
##### Global Variables ################
#######################################

USAGE   = """
Usage:
    armorcli (options) <command> <subcommand>

Options:
    security            Display from under the Security Tab
    infrastructure      Display from under the Infrastructure Tab
    support             Display from under the Support Tab
    account             Display from under the Account Tab

Commands:
    infrastructure
        list_vms        Returns a list of VMs
        list_apps       Returns a list of Workloads
    account
        user_info       Returns information about the current user

Subcommands:
    infrastructure
        list_vms
            coreInstanceId  Returns a list of all core instance ids
            cpu             Returns a list of CPU counts
            dateCreated     Returns a list of creation dates
            externalAddress Returns a list of Public IP addresses
            ipAddress       Returns a list of Internal IP addresses
            location        Returns a list of locations
            memory          Returns a list of Memory Resources
            name            Returns a list of VM Names
            operatingSystem Returns a list of OSs
            product         Returns a list of dicts for product info
            tags            Returns a list of list of tags
            vmId            Returns a list of VM IDs
            workLoadName    Returns a list of Workloads (PODs)
            zone            Returns a list of Zones
        list_apps
            id              Returns a list of Workload IDs
            location        Returns a list of Workload locations
            name            Returns a list of Workload names
            vmCount         Returns a list of Workload VM Counts
            zone            Returns a list of Workload vCenters
    account
        user_info
            accounts        Returns accounts associated with the current user
            features        Returns features associated with the current user
            permissions     Returns permissions associated with the current user
            user            Returns user info associated with the current user

Examples:
    armorcli infrastructure list_vms    # Returns a list of VMs
"""

DEBUG   = os.environ.get('Debug', None)

account_id, baseurl, token   = armor_auth.main()

headers = {
    "Accept": "application/json",
    "Authorization": "FH-AUTH " + token,
    "X-Account-Context": str(account_id)
}

first_arg   = [
    "security",
    "infrastructure",
    "support",
    "account"
]

#######################################
### Main Function #####################
#######################################

def main():
    if DEBUG:
        print("Checking syntax.")

    syntax_check()

    if DEBUG:
        print("\nBase URL: "    + baseurl           + "\n")
        print(
            "Headers: "       +
            json.dumps(
                headers,
                indent=4,
                sort_keys=True
            )                                      + "\n"
        )

    if sys.argv[1] == "infrastructure":
        if sys.argv[2] == "list_vms":
            out = infrastructure.get_vm_list(baseurl, headers)
            if len(sys.argv) == 4:
                out = [l[sys.argv[3]] for l in out]

            print(
                json.dumps(out, indent=4, sort_keys=True)
            )

        if sys.argv[2] == "list_apps":
            out = infrastructure.get_app_list(baseurl, headers)
            if len(sys.argv) == 4:
                out = [l[sys.argv[3]] for l in out]

            print(
                json.dumps(out, indent=4, sort_keys=True)
            )

    if sys.argv[1] == "account":
        if sys.argv[2] == "user_info":
            out = account.get_user_info(baseurl, headers)
            if len(sys.argv) == 4:
                out = [l[sys.argv[3]] for l in out]

            print(
                json.dumps(out, indent=4, sort_keys=True)
            )

    if DEBUG:
        print('Returned output')

    return out


#######################################
### Program Specific Functions ########
#######################################

def syntax_check():
    if len(sys.argv) < 3:
        invalid(1)
    if sys.argv[1] not in first_arg:
        invalid(2)


def invalid(code=255):
    print("Invalid syntax: \n" + USAGE + "\n")
    sys.exit(code)

#######################################
##### Execution #######################
#######################################

if __name__ == "__main__":
    main()
